#!/usr/bin/env ruby

require 'fileutils'
$stdout.sync = true

#
# Setting up directories
#
BUILDPACK_DIR = File.absolute_path(File.dirname($0) + '/..')
BUILD_DIR, CACHE_DIR = ARGV.map { |p| File.absolute_path(p) }
FileUtils.mkdir_p([BUILD_DIR, CACHE_DIR, "#{CACHE_DIR}/.dub"])
if !File.exist?("#{BUILD_DIR}/.dub")
  FileUtils.ln_s("#{CACHE_DIR}/.dub", "#{BUILD_DIR}/.dub")
end

#
# Utility methods
#
def puts_caption(s)
  puts "\n-----> #{s}"
end
def puts_indent(s)
  puts "       #{s}"
end

def read_config_file(dir)
  content = File.read("#{dir}/vibed_buildpack.config") rescue ''
  kvs = content.split("\n").map { |line| line.split('=').map(&:strip) }.select { |pair| pair.size == 2 }
  Hash[kvs]
end

def ensure_archive(url)
  basename = File.basename(url)
  tool_name = basename[0..2]
  path = "#{CACHE_DIR}/#{basename}"
  if !File.exist?(path)
    FileUtils.rm_f(Dir["#{tool_name}*"])
    puts_caption "Downloading #{tool_name} from #{url}..."
    puts_indent `curl -L "#{url}" -o #{path}`
    fail "Failed to retrieve an archive from #{url}!" unless $?.success?
  end
  path
end

def extract_archive(path, dest_dir)
  puts_caption "Extracting #{path}..."
  if path.end_with?('.zip')
    puts_indent `unzip -d #{dest_dir} #{path}`
  elsif path.end_with?('.tar.gz') || path.end_with?('.tgz')
    FileUtils.mkdir_p dest_dir
    puts_indent `tar -xzf #{path} --directory=#{dest_dir}`
  else
    fail 'Unexpected archive format!'
  end
  fail "Failed to extract archive #{path}!" unless $?.success?
end

#
# Start
#
config_dict = read_config_file(BUILDPACK_DIR).merge read_config_file(BUILD_DIR)
puts_caption 'Config:'
config_dict.each { |k, v| puts_indent "#{k}=#{v}" }

dmd_url, dub_url = config_dict.values_at 'DMD_ARCHIVE_URL', 'DUB_ARCHIVE_URL'
dmd_dir, dub_dir = [dmd_url, dub_url]
  .map { |url| File.basename(url).sub(/\.zip|\.tar\.gz|\.tgz$/, '') }
  .map { |basename| File.join(CACHE_DIR, basename) }

[[dmd_url, dmd_dir], [dub_url, dub_dir]].each do |url, dir|
  if !Dir.exist?(dir)
    extract_archive(ensure_archive(url), dir)
  end
end

puts_caption 'Building app...'
Dir.chdir(BUILD_DIR) do
  puts_indent `PATH=$PATH:#{dmd_dir}/dmd2/linux/bin64 #{dub_dir}/dub build --build=release`
  FileUtils.rm_rf(%w(source src views))
  fail 'Build failed!' unless $?.success?
end
