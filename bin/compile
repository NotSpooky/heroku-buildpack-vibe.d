#!/bin/sh

mkdir -p "$1" "$2"
BUILD_DIR=$(cd "$1/" && pwd)
CACHE_DIR=$(cd "$2/" && pwd)

TOOL_DIR=$BUILD_DIR/toolchain
ARCHIVE_DIR=$CACHE_DIR/archives
mkdir -p "$TOOL_DIR" "$ARCHIVE_DIR"

DMD_ARCHIVE_PATH=http://downloads.dlang.org.s3-website-us-east-1.amazonaws.com/releases/2013
DMD_ARCHIVE=dmd.2.062
DUB_ARCHIVE_PATH=http://registry.vibed.org/files
DUB_ARCHIVE=dub-0.9.13-linux-x86_64

indent() {
  sed -u 's/^/       /'
}

# download latest archives
cd $ARCHIVE_DIR
if [ ! -f $ARCHIVE_DIR/$DMD_ARCHIVE.zip ]
    echo "-----> Downloading DMD"
    rm dmd*.zip
    curl $DMD_ARCHIVE_PATH/$DUB_ARCHIVE.zip -o $DUB_ARCHIVE.zip
fi
if [ ! -f $ARCHIVE_DIR/$DUB_ARCHIVE.tar.gz ]
    echo "-----> Downloading dub package manager"
    rm dub*.tar.gz
    curl $DUB_ARCHIVE_PATH/$DUB_ARCHIVE.tar.gz -o $DUB_ARCHIVE.tar.gz 
fi

# initialise toolchain
echo "-----> Initializing toolchain"
cd $TOOL_DIR

# expand DMD
unzip $ARCHIVE_DIR/$DMD_ARCHIVE.zip

# expand dub
tar xzf $ARCHIVE_DIR/$DUB_ARCHIVE.tar.gz
ln -s $DUB_ARCHIVE dub

echo "-----> Building app"
export PATH=$TOOL_DIR/dmd2/linux/bin64:$TOOL_DIR/dub/bin

# link the dub cache to the cache folder
mkdir -p $CACHE_DIR/.dub

if [ ! -e $BUILD_DIR/.dub ]
    ln -s $CACHE_DIR/.dub $BUILD_DIR/.dub
fi

# if package.json has contents, run dub build
if [ ! -s $BUILD_DIR/package.json ]; then
  echo "package.json was empty"
  exit 1
else
  cd $BUILD_DIR
  # FIXME fragile - fix by reading the package.json for app name
  dub build -v | grep "Application output name is" | sed -e "s/.*?'(.*)'/\1/" > _appname
fi | indent

# clean up any remaining sources
cd $BUILD_DIR
rm -rf "$TOOL_DIR" source src views
